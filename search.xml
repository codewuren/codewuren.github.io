<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用Hexo快速搭建静态博客.md</title>
    <url>/2024/04/01/%E4%BD%BF%E7%94%A8Hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2-md/</url>
    <content><![CDATA[<h2 id="使用-Hexo-快速搭建静态博客"><a href="#使用-Hexo-快速搭建静态博客" class="headerlink" title="使用 Hexo 快速搭建静态博客"></a>使用 Hexo 快速搭建静态博客</h2><p>我的这个博客就是使用Hexo在一小时不到的时间搭建的，而且几乎零成本（域名+SSL证书），日常中如果我们需要搭建一个博客，又不想敲代码，可以一试。</p>
<p>下面将介绍如何从零开始搭建一个类似于我这个博客的博客，本教程将教你使用 <code>Hexo + Next主题</code> 在 GitHub 上面搭建你的个人博客，并使用你自己的域名。</p>
<p>注：本教程只讨论将博客搭建在 GitHub 上，如果你想搭建在你自己的服务器上，请查看其它教程。</p>
<span id="more"></span>

<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://hexo.io/zh-cn/">Hexo</a>是一个快速、简洁且高效的博客框架。支持用 <code>Markdown</code> 来写博文， 同时有不错的插件拓展性，甚至可以一键部署到 GitHub 仓库，使用起来非常方便。</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li><a href="https://nodejs.org/en">Node.js</a></li>
<li><a href="https://git-scm.com/">Git</a></li>
</ul>
<p>Node.js 和 Git 的安装方法，Windows 用户直接去相应官网下载安装程序安装即可，Linux 和 Mac 还有其他操作系统直接使用相应的软件包管理器进行安装即可。</p>
<h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<h3 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h3><h4 id="初始化一个项目"><a href="#初始化一个项目" class="headerlink" title="初始化一个项目"></a>初始化一个项目</h4><p>打开终端，使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init 文件夹名</span><br></pre></td></tr></table></figure>

<p>以初始化一个博客项目。</p>
<h4 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h4><p>生成的项目默认是已经配置好了，使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>可以开始本地测试，默认使用4000端口，访问 <a href="localhost:4000"><code>localhost:4000</code></a> 即可查看。</p>
<p>如果你的需求并不是很高，可以直接跳过本标题下的剩余内容，直接看 <code>部署</code></p>
<h4 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h4><p>使用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>会在项目跟文件下，新建一个 <code>public</code> 文件夹来存放生成的静态页面及所有的资源。</p>
<h3 id="使用-Next-主题"><a href="#使用-Next-主题" class="headerlink" title="使用 Next 主题"></a>使用 Next 主题</h3><p>默认的主题比较难看，我一直用的是 <a href="https://github.com/next-theme/hexo-theme-next">Next主题</a>，你将该仓库直接拷贝到项目根目录下的 <code>themes</code> 文件夹下面，然后修改项目根目录下的 <code>_config.yml</code> 配置文件下的 <code>theme</code> 为 <code>next</code> 即可使用 Next 主题了。</p>
<p>同样是开箱即用，主题的配置文件为该主题根目录下的 <code>_config.yml</code>，修改该文件即可。</p>
<h3 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h3><p>首先你要新建一个 GitHub 仓库，仓库名是 你的ID.github.io</p>
<p>比如我的 ID 是 codewuren，那么我的这个仓库名就是 <code>codewuren.github.io</code>，这样这个仓库会被默认为是一个 GitHub Page 仓库。可以通过访问 <code>&lt;ID&gt;.github.io</code> 来访问你的博客，比如我的就是 <code>codewuren.github.io</code>。</p>
<p>然后修改项目根目录下的 <code>_config.yml</code> 配置文件，修改完基本信息后，修改 <code>deploy</code> 下的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: &lt;仓库链接&gt; <span class="comment">#比如&quot;git@github.com:codewuren/codewuren.github.io.git&quot;</span></span><br><span class="line">  branch: &lt;分支名&gt; <span class="comment">#比如&quot;master&quot;</span></span><br><span class="line">  message: &lt;自定义提交信息&gt; <span class="comment">#默认是Site updated: &#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;)</span></span><br></pre></td></tr></table></figure>

<h4 id="安装-hexo-depolyer-git"><a href="#安装-hexo-depolyer-git" class="headerlink" title="安装 hexo-depolyer-git"></a>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-depolyer-git</a></h4><p>使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>就可以把你的博客推送到 GitHub 上面去了，之后可以通过 <code>&lt;ID&gt;.github.io</code> 访问，如 <a href="codewuren.github.io"><code>codewuren.github.io</code></a>。</p>
<h3 id="使用你自己的域名"><a href="#使用你自己的域名" class="headerlink" title="使用你自己的域名"></a>使用你自己的域名</h3><h4 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h4><p>首先你得购买一个域名，可以在<a href="https://www.huaweicloud.com/">华为云</a>、<a href="https://www.aliyun.com/">阿里云</a>、<a href="https://cloud.tencent.com/">腾讯云</a>等网站购买一个域名，如果你预算不够充足，可以考虑 <code>.top</code> 这种便宜的域名。</p>
<h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><p>光购买了域名还是不能直接使用的，在你购买的平台控制台里面找到域名解析的页面，然后修改解析配置。下面以我的域名解析设置为例：</p>
<table>
<thead>
<tr>
<th>域名</th>
<th>类型</th>
<th>线路类型</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>codewuren.top</td>
<td>CNAME</td>
<td>全网默认</td>
<td>codewuren.github.io.</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://www.codewuren.top/">www.codewuren.top</a></td>
<td>CNAME</td>
<td>全网默认</td>
<td>codewuren.github.io.</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>TTL时间可根据你的需求更改。</p>
<p>域名解析设置好之后依旧是不能直接使用，还得在你的博客项目里面设置了使用你的域名才行。</p>
<h4 id="使用域名"><a href="#使用域名" class="headerlink" title="使用域名"></a>使用域名</h4><p>在你博客项目根目录下的 <code>source</code> 文件夹下面新建一个名为 <code>CNAME</code> 的文件，里面写上你购买的域名。</p>
<p>然后就可以直接通过你所购买的域名来访问你的博客了。</p>
<h3 id="申请-SSL-证书"><a href="#申请-SSL-证书" class="headerlink" title="申请 SSL 证书"></a>申请 SSL 证书</h3><p>默认你的博客使用的是 <code>http</code>， 如果想使用 <code>https</code>，你需要申请一个 SSL 证书并绑定到你的域名上。</p>
<p>详细的申请方法就不说了，不同网站可能有所差异。</p>
<p>证书申请完了之后，要再次修改你的域名解析配置，按要求添加指定配置即可，如：</p>
<table>
<thead>
<tr>
<th>域名</th>
<th>类型</th>
<th>线路类型</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>_dnsauth.codewuren.top</td>
<td>TXT</td>
<td>全网默认</td>
<td>&lt;申请证书给你的密钥&gt;</td>
</tr>
</tbody></table>
<p>配置完之后记得进行 DNS 验证，看你的配置是否正常。</p>
<p>之后在 GitHub 上面打开你之前新建的博客仓库，点 <code>Settings</code>，然后找到 <code>Code and automation</code> 里的 <code>Pages</code> 设置页面，勾选里面的 <code>Enforce HTTPS </code> 即可。</p>
<p>如果发现无法勾选，可以先清空 <code>Custom domain</code> 里面的内容，再次添加你的域名，等待 <code>DNS 验证</code> 通过即可。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法模板.md</title>
    <url>/2024/04/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h2 id="排序算法模板分享"><a href="#排序算法模板分享" class="headerlink" title="排序算法模板分享"></a>排序算法模板分享</h2><p>虽然实际CP竞赛中不会让你手写排序，但是学习一下一些排序算法的思想还是有些用处。</p>
<p>如果你用的是C++，可以使用算法库 <code>&lt;algorithm.h&gt;</code> 里的 <a href="https://en.cppreference.com/w/cpp/algorithm/sort"><code>std::sort()</code></a> 快速对数组进行排序。</p>
<p>e.g.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : vec) &#123;</span><br><span class="line">        cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果是:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1 2 3 4 5 </span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> arr[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = arr[(l + r) &gt;&gt; <span class="number">1</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span> (arr[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span> (arr[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(arr[i], arr[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(arr, l, j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(arr, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">quick_sort</span>(arr, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> arr[MAXN];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, i = l, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">merge_sort</span>(arr, l, mid), <span class="built_in">merge_sort</span>(arr, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tmp[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt;= arr[j]) tmp[k++] = arr[i++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k++] = arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k++] = arr[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k++] = arr[j++];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++) &#123;</span><br><span class="line">        arr[i] = tmp[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">merge_sort</span>(arr, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
</search>
